---
layout: post
title: 指针、野指针、空指针、地址
date: 2018-04-19 16:00:00.000000000 +09:00
---

1、什么是指针？

指针本身具有独立的数据类型，可以用这个类型声明 一个指针变量并赋值，这个指针变量是用来保存某个内存的地址。指针变量本身也是占有内存的，这个内存使用来存写地址数据的。（指针变量是用来存储地址的，地址是一串数字。）

指针是用来保存地址的，但是指针有类型，比如说int 型指针，char型指针，float 型指针，double 型指针等，指针变量和其他变量是一样的。指针的类型 表明，你希望从存储的地址里面取出来的数据，或者存进去的数据，是什么类型的。

指针一定只能保存地址，保存地址使用的是指针变量。 `指针变量必须初始化`，否则不知道指向哪个地址。并且可以通过这个地址来操作对应的内容。只要知道了一个变量的内存地址，就可以通过指针来操作这块内存空间。指针在C语言中占8个字节。

系统类型可以在编译时进行类型检测，让编译器帮助避免犯错，不然还得等到程序运行的时候才能发现。类型可以指明指针这块内存地址所保存的二进制数据。


{% highlight ruby %}
//1、定义一个int 型常量a，p 就是用来存储a的地址的，&a就是取a的地址。int * 表示指针变量p 是int型指针，里面存储的地址所指向的数据是int型

int a = 0;

int* p = &a;// int* p 等价于 int *p  * 在表示指向的时候，*只是说明这个变量是指针，对于操作的时候，*表示操作地址。

printf("a = %d\n",(int) sizeof(p));// p变量占8个字节，说明指针在C语言中占 8个字节



//2、 指针变量只能保存地址

int *x = 10;//错误，指针变量只能保存地址  &a

int *y = a;//错误，指针变量只能保存地址  &a



//3、 z = &b 以下打印的全是b的地址
int b = 10;

int *z = &b;

printf("%p\n",&b);

printf("%p\n",z);


//4、声明指针变量时候的* 和操作地址的时候的 * 的区别 .一个是定义，一个是寻找并操作. *p 指的是 找到这块地址里面对应的数据，并进行操作，这里 *p 是寻找并操作。
int  u = 10;

int *w = &u;

*w = 20;

printf("指针w 的占多少字节 ---- %d\n",(int) sizeof(w));

printf("u ---- %d\n",u);

printf("&u的地址 ---- %p\n",&u);

printf("w ---- %p\n",w);

printf("*w ---- %p\n",*w);

*w = &u;//这个是错误的，*w代表寻找w 存放的地址对应的数据，并操作，不能给他赋值 地址。

//5、利用指针来接收变量的地址

int m = 10;

change(&m);

printf("m ---- %d\n",m);

//6、取地址符 &取地址，指针保存地址

int d = 10;

int *c = &d;//c 保存d的地址

printf("*c ---- %d\n",*c);//找到 *c 对应的地址 里面所保存的数据

//修改指针指向的那块内存空间
*c = 1000;

printf("*c ---- %d\n",*c);//找到 *c 对应的地址 里面所保存的数据


{% endhighlight %}



2、什么是空指针？
没有存储地址的指针就称为空指针。


3、什么是野指针？

野指针不是NULL 指针，是指向“垃圾”内存（不可用内存）的指针，野指针非常危险。

[SusisePointerProject]


[SusisePointerProject]: https://github.com/Susise/SusisePointer

